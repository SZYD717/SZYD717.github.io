<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2023/10/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%9F%BA%E7%A1%80%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<p>设计模式之所以存在，是对代码结构设计中重复出现的<strong>解决方案</strong>及其<strong>思想</strong>进行了结构化的总结。<br><strong>设计模式的三要素</strong></p>
<ul>
<li>问题：在<strong>什么情况下</strong>使用当前的设计模式</li>
<li>解决方案：使用了<strong>哪些逻辑，组件</strong>来解决当前的问题</li>
<li>效果：如何解决了问题，以及该解决方案带来的<strong>副作用</strong></li>
</ul>
<p>&#x3D;&#x3D;<strong>⚠️请务必注意⚠️</strong>&#x3D;&#x3D;不要过度设计，为了应用某一种设计模式而应用。而是尽量准确的分析问题，找到最需要的特性。<strong>找到最切合的设计模式，而不是最复杂的</strong></p>
<p>以下这些原则对理解和记忆既有设计模式，并根据情况灵活改进是很重要的</p>
<h1 id="OCP-开闭原则"><a href="#OCP-开闭原则" class="headerlink" title="OCP 开闭原则"></a>OCP 开闭原则</h1><p>Open Closed Principle, OCP<br>对扩展开放，对修改关闭</p>
<p>解释：设计一个软件的时候，模块和函数的设计应该对扩展开放而对修改关闭。在尽量不修改原有代码的情况下进行扩展。</p>
<p>意义：对以后的升级、维护、变化有更好的支持，避免修改导致的混乱。</p>
<h1 id="SRP-单一职责原则"><a href="#SRP-单一职责原则" class="headerlink" title="SRP 单一职责原则"></a>SRP 单一职责原则</h1><p>Single Responsibility Principle, SRP<br>一个类只负责一个功能领域中的相应职责</p>
<p>解释：一个类&#x2F;模块有且仅有一个让其改变的原因。承担太多职责会导致完成其他职责的能力被削弱，对于变化引起的问题很脆弱。</p>
<p>意义：解耦，增强内聚。对改变更加友好。</p>
<p>Tips-实际情况下该原则执行时遇到的问题:<br>很难衡量一个类的职责，很难确定职责的粒度。<br>&#x3D;&#x3D;举个🌰&#x3D;&#x3D;：在分布式系统的微服务拆分中，团队间会为了哪个功能从属于哪个服务而有争论。这也是比较依赖架构或者业务经验的地方。</p>
<h1 id="LSP-里氏代换原则（设计父类和子类的关系）"><a href="#LSP-里氏代换原则（设计父类和子类的关系）" class="headerlink" title="LSP 里氏代换原则（设计父类和子类的关系）"></a>LSP 里氏代换原则（设计父类和子类的关系）</h1><p>Liskov Substitution Principle，LSP<br>所有引用基类的地方必须能透明地使用其子类的对象</p>
<p>解释：所有引用到父类的地方，必须能够透明的使用其子类的对象。也<strong>就是父类出现的地方，子类也一定可以出现</strong></p>
<p>意义：子类可以直接替换父类，而不需要在其他地方做出额外的修改。父类可以被有效的复用，子类可以在父类的基础上增加新的特性和行为。LSP原则本质上是对抽象化实现（接口&#x2F;抽象类-&gt;实现类）的具体步骤的规范。</p>
<p>&#x3D;&#x3D;举个🌰&#x3D;&#x3D;：父类的set方法接收字符串，子类的set方法继承自父类，但是进行了Override。实现了一个额外的合法性校验，如果失败则返回一个错误字符串的信息。<br>这是不符合里氏替换原则的。因为父类被替换为子类，子类实现了额外的功能。此时，当输入为非法字符串时，返回了错误信息，而不是继续执行。发生了逻辑上的改变。</p>
<p><strong>等等，这和继承、多态有什么分别？</strong> 继承和多态已经可以让父类被直接替换为子类了，但是这并不能保证替换后程序逻辑像原本设计的那样进行。</p>
<p>来看看里氏替换的更细致的规则：里氏替换原则要求子类要遵守父类在某些行为上的约定，例如对于输入输出、异常情况的约定等等。更具体来说有：</p>
<ol>
<li>子类的方法不能违反父类方法对于输入输出<strong>异常的约定</strong></li>
<li>子类方法不能违反父类方法<strong>定义的功能</strong></li>
<li>子类必须<strong>完全实现父类的抽象方法</strong>（不能在子类里无效的实现父类方法）</li>
</ol>
<h1 id="DIP-依赖倒转原则"><a href="#DIP-依赖倒转原则" class="headerlink" title="DIP 依赖倒转原则"></a>DIP 依赖倒转原则</h1><p>Dependency Inversion Principle，DIP<br>依赖于抽象，不能依赖于具体实现</p>
<p>解释：程序依赖于抽象接口而不是依赖于具体的实现，面向接口编程</p>
<p>意义：传递参数和关联关系中，尽量用高层次的抽象，用接口和抽象类进行声明，返回类型声明等，而不是具体的类。要List 而不是ArrayList或者LinkedList。从实践的角度来说，实现类应该<strong>只实现接口中有的方法</strong>，而不直接的添加额外的方法。</p>
<p>Tips：</p>
<ul>
<li>高层模块和低层模块都应该依赖于抽象</li>
<li>抽象不应该依赖于具体，具体应该依赖于抽象<br>针对抽象层编程，而将实现类的对象通过DI的方式注入到其他对象中。注入的方式有：</li>
<li>构造注入</li>
<li>Setter注入</li>
<li>接口注入</li>
</ul>
<p>比如List对象，通过setter方法既可以指向ArrayList也可以指向LinkedList。而使用共有的方法不会出错</p>
<h1 id="ISP-接口隔离原则"><a href="#ISP-接口隔离原则" class="headerlink" title="ISP 接口隔离原则"></a>ISP 接口隔离原则</h1><p>Interface Segregation Principle，ISP<br>类之间的依赖关系应该建立在最小的接口上</p>
<p>解释：类之间的依赖关系应该通过尽量小的接口。接口要尽可能细化，接口中的方法要尽量少。<br>接口隔离原则是单一职责原则的更严格的要求。单一职责强调的是业务逻辑上的，接口隔离强调更细致的分割</p>
<p>意义：提供更好的维护性和低耦合</p>
<h1 id="CARP-合成-聚合复用原则"><a href="#CARP-合成-聚合复用原则" class="headerlink" title="CARP 合成&#x2F;聚合复用原则"></a>CARP 合成&#x2F;聚合复用原则</h1><p>Composite&#x2F;Aggregate Reuse Principle，CARP<br>尽量使用合成&#x2F;聚合，而不是通过继承达到复用的目的</p>
<p>解释：在新的对象里使用一些已有的对象，使其成为新对象的一部分。通过对这些对象委派达到复用已有功能对目的，而不是通过继承实现</p>
<p>聚合和合成的异同：</p>
<ul>
<li>聚合：一种较为松散的整体 部分关系，A持有B对象，不意味着B对象由A对象管理。B的生命周期由自己管理</li>
<li>合成：一种更严格的整体和部分的关系，A和B具有一样的生命周期</li>
</ul>
<p>意义：</p>
<h1 id="LKP-LOD-最少知识原则-迪米特法则"><a href="#LKP-LOD-最少知识原则-迪米特法则" class="headerlink" title="LKP&#x2F;LOD 最少知识原则&#x2F;迪米特法则"></a>LKP&#x2F;LOD 最少知识原则&#x2F;迪米特法则</h1><p>Least Knowledge Principle，LKP      Law of Demeter，LOD<br>一个软件实体应当尽可能少的与其他实体发生相互作用</p>
<p>解释：每一个单位都对其他的单位有最少的知识，而且局限于那些密切相关的单位。</p>
<p>意义：降低类之间的耦合，从功能上相互独立，通过中间类转达，而不是直接建立联系</p>
<p>比如老板想知道员工的总人数。老板不需要掌握员工的列表，而应该设立一个中间类（HR）来实现人数清点，而HR有员工名单是非常合理的。</p>
]]></content>
  </entry>
  <entry>
    <title>Network Layer</title>
    <url>/2023/10/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E4%BA%92%E8%81%94%E7%BD%91%E5%8D%8F%E8%AE%AE/Network%20Layer/</url>
    <content><![CDATA[<h1 id="Network-layer的概述"><a href="#Network-layer的概述" class="headerlink" title="Network layer的概述"></a>Network layer的概述</h1><p>Network层的sender端将来自传输层的segment封装为datagrams，并执行从host到host的传输，receiver端再解包成segment给传输层。Network层的两大作用是<strong>Forwarding和Routing</strong><br><strong>Forwarding-转发</strong>： 将packets从router的输入送到正确的输出（如何通过当前Router），通常只需要几纳秒<br><strong>Routing-路由选择</strong>：决定packets要到达目标IP该走哪条route（如何到达目的地，要经过哪些Route），通常为几秒<br>Router作为负责这一层的协调者，会检查每一个通过它的datagram的IP地址</p>
<h2 id="Data-Plane"><a href="#Data-Plane" class="headerlink" title="Data Plane"></a>Data Plane</h2><p>从功能上来说，是Forwarding 转发。不涉及路线规划，只负责根据datagram的目标IP传输到正确的输出端口中。<br>根据现有的路由表和datagram的IP地址来决定转发到哪个端口</p>
<span id="more"></span><!-- more -->
<h2 id="Control-Plane"><a href="#Control-Plane" class="headerlink" title="Control Plane"></a>Control Plane</h2><p>功能上是Routing。控制datagram如何从A到B，但是不关注具体如何在每个节点的具体执行。该部分决定了路由表，路由表是转发功能的实施基础。<br>具体来说，有两种方式</p>
<ul>
<li>传统的路由算法，在Router内部实现</li>
<li>SDN，通过远程server中实现的方式来进行</li>
</ul>
<h2 id="网络服务模型"><a href="#网络服务模型" class="headerlink" title="网络服务模型"></a>网络服务模型</h2><p>对于host2host的传输通道来说，往往会注重不同的特性。例如单个datagram的时延，flow型datagram的到达顺序，最小带宽等等。</p>
<h1 id="Router内部是什么"><a href="#Router内部是什么" class="headerlink" title="Router内部是什么"></a>Router内部是什么</h1><h2 id="组成结构及其功能"><a href="#组成结构及其功能" class="headerlink" title="组成结构及其功能"></a>组成结构及其功能</h2><ul>
<li>路由处理：control plane的软件，负责产出routing table给data plane</li>
<li>高速switching fabric：硬件，完成input端口到output端口的查找和转发执行</li>
<li>输入端口：<ul>
<li>line termination：物理层，接受bit级别的输入</li>
<li>link layer protocol：数据链路层的协议，主要是接受数据</li>
<li>lookup forwarding queueing：在这里，路由器使用datagram中的header在路由表中查找具体的输出端口，排队等待路由器找到输出并发送。在这里forwarding会有两种方式<ol>
<li>基于目标IP的forwarding，只根据目标IP来决定forwarding</li>
<li>总体的forwarding：基于一组header中的值来决定输出端口</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="Forwarding的核心原则：longest-prefix-matching"><a href="#Forwarding的核心原则：longest-prefix-matching" class="headerlink" title="Forwarding的核心原则：longest prefix matching"></a>Forwarding的核心原则：longest prefix matching</h2><p>最长前缀匹配原则：在路由表中根据IP查找输出端口号时，由路由表中已有的前缀匹配长度最长的那条决定。<br>一般在TCAM上使用，TCAM是一种超高速内存，可以在一个时钟内完成地址查找</p>
<h2 id="Switching-fabrics-交换电路"><a href="#Switching-fabrics-交换电路" class="headerlink" title="Switching fabrics 交换电路"></a>Switching fabrics 交换电路</h2><p>从input buffer中，将packet发送到正确的output buffer中。是路由器中的核心组成部分，直接实现了路由器中的转发的动作<br>从类别来分：</p>
<ul>
<li>基于内存：packet被复制到router的内存中进行操作，完全由CPU进行的switching。速度取决于内存的读写带宽</li>
<li>总线设计：从input到output只有一条共享的总线作为通道，所以速度取决于总线的带宽</li>
<li>纵横式：避免了总线设计的带宽问题，每个input都直接连接output</li>
</ul>
<h3 id="输入延迟"><a href="#输入延迟" class="headerlink" title="输入延迟"></a>输入延迟</h3><p>input buffer和output buffer同时只能发送&#x2F;接受一个packet，所以会导致类似死锁的情况</p>
<ul>
<li>Head of the Line（HOL）阻挡延迟：假设两条输入 A和B，两条输出 C和D。现在A和B各有一个包想发送到C。由于C同时只能接受一个input，所以此时B就被卡住，需要等待A传完才可以传自己的。但其实B后面还有一个包是传给D的，其实就发现B本可以先传给D，而不需要等着目前被卡住的C的通道。</li>
</ul>
<h3 id="输出延迟"><a href="#输出延迟" class="headerlink" title="输出延迟"></a>输出延迟</h3><p>输出的网络传输速度比switching电路慢，所以也会排队，因此需要在buffer中等待。<br>输出可能会优先传输那些网络条件较好的packet<br>选择下一个传输的包的三种方法：</p>
<ol>
<li>FIFO队列</li>
<li>优先队列，根据重要程度来排序</li>
<li>Round robin，根据从哪个input来的来轮，可以调整权重来修改传输的优先级</li>
</ol>
<h1 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h1><p>网络层除了IP协议，还有Routing的协议（用于路径规划，RIP，OSPF，BGP），ICMP协议（报错，trace route）</p>
<h2 id="datagram-format-数据包的格式"><a href="#datagram-format-数据包的格式" class="headerlink" title="datagram format-数据包的格式"></a>datagram format-数据包的格式</h2><p>header的结构如下：</p>
<ul>
<li>IP协议的版本</li>
<li>header的长度</li>
<li>数据的类型，描述了优先级</li>
<li>datagram长度</li>
<li>用于分包重组的字段<ul>
<li>16 位identifier</li>
<li>flags</li>
<li>fragment offset</li>
</ul>
</li>
<li>time to live：定义最大hop数</li>
<li>上层的协议</li>
<li>header的checksum</li>
<li>32位 source IP</li>
<li>32位 desti IP</li>
<li>可选的其他内容</li>
</ul>
<h2 id="fragmentation"><a href="#fragmentation" class="headerlink" title="fragmentation"></a>fragmentation</h2><p>MTU：可以接受的最大的单包大小<br>IP的datagram会在网内被分为几个fragment，大datagram被分为几个小的datagram方便传输。在dest被合成为原始大小</p>
<h2 id="IPv4地址"><a href="#IPv4地址" class="headerlink" title="IPv4地址"></a>IPv4地址</h2><h3 id="IPv4的三种表示方式："><a href="#IPv4的三种表示方式：" class="headerlink" title="IPv4的三种表示方式："></a>IPv4的三种表示方式：</h3><ul>
<li>二进制<br>  00000000 00000000 00000000 00000000</li>
<li>小数点+十进制（最常见的）<br>  192.169.0.1</li>
<li>16进制（每位表示4bits）<br>  4a 3b 11 00</li>
</ul>
<h3 id="IP-地址"><a href="#IP-地址" class="headerlink" title="IP 地址"></a>IP 地址</h3><ul>
<li>Interface：host&#x2F;router和物理link间的连接，例如Switch和Wi-Fi基站。指代的是形成一个子网的，一个网段的IP地址。</li>
</ul>
<h2 id="子网"><a href="#子网" class="headerlink" title="子网"></a>子网</h2><p>相互独立的网络叫做子网，子网内部的设备可以相互直接连接，<br>IP地址的一部分用来表示该IP的从属关系。从子网划分的角度来看，IP地址有两个部分：</p>
<ol>
<li>前半部分（subnet part）是用于表示当前IP所属的网络的编号，同一子网内具有相同的网络段</li>
<li>后半部分（host part）用于表示IP在子网内部的编号。</li>
</ol>
<h3 id="局域网"><a href="#局域网" class="headerlink" title="局域网"></a>局域网</h3><p>这些网段不会作为实际的IP，互联网IP的保留字。因为它们被用在了不能被外部网络访问的内网中</p>
<table>
<thead>
<tr>
<th>Class</th>
<th>Netids</th>
<th>Blocks</th>
</tr>
</thead>
<tbody><tr>
<td>A</td>
<td>10.0.0</td>
<td>1</td>
</tr>
<tr>
<td>B</td>
<td>172.16-172.31</td>
<td>16</td>
</tr>
<tr>
<td>C</td>
<td>192.168.0-192.168.255</td>
<td>256</td>
</tr>
</tbody></table>
<h3 id="子网掩码（地址分配策略Classless-Inlerdomain-Routing—CIDR）"><a href="#子网掩码（地址分配策略Classless-Inlerdomain-Routing—CIDR）" class="headerlink" title="子网掩码（地址分配策略Classless Inlerdomain Routing—CIDR）"></a>子网掩码（地址分配策略Classless Inlerdomain Routing—CIDR）</h3><p>&#x2F;24 就是子网掩码的一种写法，意思是有24个bit的IP地址用来作为subnet id，剩下了（32-24）bits作为host id<br>额外：Fly By Night ISP，ISP会宣称并接收所有对应其subnet id段的信息，即使它有一些subnets做为附属，这些信息在它内部按照相同的逻辑被转发给对应的subnet。这个使用一个subnet id（ISP的）来对应多个subnets（附属的）过程，就叫做路由聚合。</p>
<h3 id="VLSM（变长的子网掩码）"><a href="#VLSM（变长的子网掩码）" class="headerlink" title="VLSM（变长的子网掩码）"></a>VLSM（变长的子网掩码）</h3><p>一个大网段，例如192.168.1.0&#x2F;24对应三个子网，这三个子网分别具有20、20、50个hosts，三个路由器相互连接。所以他们应该具备不同的subnet mask的层级<br>先从大的开始：</p>
<ul>
<li>50 host：至少有6个bits要作为host id  &#x3D;&gt; 192.168.1.0&#x2F;26</li>
<li>20 host：至少有5个bits的host id &#x3D;&gt; 192.168.1.64&#x2F;27</li>
<li>20 host：至少有5个bits的host id &#x3D;&gt; 192.168.1.96&#x2F;27</li>
<li>3 host（给interface的，也就是链接子网的路由器的线路）：192.168.1.128&#x2F;30</li>
</ul>
<h3 id="DHCP-动态主机配置协议"><a href="#DHCP-动态主机配置协议" class="headerlink" title="DHCP 动态主机配置协议"></a>DHCP 动态主机配置协议</h3><p>刚刚解决了每个subnet是如何一块一块的分配IP地址的，但是这些IP地址仍未被下发到具体的host上。DHCP解决的就是这个问题，给一个刚刚加入这个网络的设备动态的分配一个IP地址。<br>DHCP主要有四个步骤</p>
<ol>
<li>host发出寻找DHCP的信息</li>
<li>DHCP回应一个DHCP offer（带着IP地址，这里也叫Yiaddrr）</li>
<li>host请求IP地址，发送DHCP request</li>
<li>DHCP服务器发送 DHCP ack<br>DHCP不仅会返回分配的IP地址，它还</li>
</ol>
<ul>
<li>给host发送first hop的router地址</li>
<li>DNS 服务器的name 和IP</li>
<li>子网掩码</li>
</ul>
<h2 id="Network-address-translation（NAT）"><a href="#Network-address-translation（NAT）" class="headerlink" title="Network address translation（NAT）"></a>Network address translation（NAT）</h2><p>这项技术的诞生背景就是IPv4地址已经要被用光了，这项技术可以将一个公网IP给多个Host用<br>一个公网IP：111.111.1.1，被Router映射到局域网内的多个设备。但是端口号还是一对一的，也就是111.111.1.1的80端口只会对应一个设备，对应关系由Router来管理。<br>NAT的三个部分：</p>
<ol>
<li>Router将外送的IP和端口号替换为公网的IP和端口号</li>
<li>记录NAT的端口对应关系</li>
<li>对进入内网的datagram的source IP和port进行替换</li>
</ol>
<h2 id="IPv6"><a href="#IPv6" class="headerlink" title="IPv6"></a>IPv6</h2><p>和NAT的动机一样，32位的IPv4快用光了。<br>IPv6的地址有40 byte定长的header，并且禁止了fragmentation 分片<br>除此之外，IPv6还有</p>
<ul>
<li>去掉了checksum，减少每个hop的处理时间</li>
<li>options和Next header段合并了</li>
<li>ICMPv6: 新版本的ICMP，支持了新的message type（Msg too big）和组管理</li>
</ul>
<h3 id="IPv6和IPv4的兼容"><a href="#IPv6和IPv4的兼容" class="headerlink" title="IPv6和IPv4的兼容"></a>IPv6和IPv4的兼容</h3><p>由于不是所有Router都支持IPv6的新协议，所以要确保IPv4和IPv6可以在网络内同时存在。<br>解决方案就是：tunneling<br>当知道下一个Hop是IPv4 Router时，IPv6的datagram作为IPv4的payload，确保IPv4 Router也可以处理</p>
<h1 id="浅述-Forward和SDN"><a href="#浅述-Forward和SDN" class="headerlink" title="浅述 Forward和SDN"></a>浅述 Forward和SDN</h1><p>SDN是什么？<br>是一种Routing的算法，也就是Control plane的控制算法。<br>传统的Routing方法：</p>
<ul>
<li>使用forwarding table结合longest-prefix 匹配来进行forwarding</li>
<li>control plane单机内计算forwarding table</li>
<li>forwarding table只根据packets的IP来给出forward 方向<br>SDN：</li>
<li>可编程的Routing算法</li>
<li>可以用packet header中的所有字段来帮助forwarding的决策</li>
<li>基于Match+action（flow table）的匹配规则</li>
<li>中心化的控制方式</li>
</ul>
<p>得益于Match+Action的结构，Router实现的功能更丰富了，例如防火墙和NAT都可以在Router内通过规则的设定实现。</p>
<h2 id="OpenFlow的例子（包括match-action）"><a href="#OpenFlow的例子（包括match-action）" class="headerlink" title="OpenFlow的例子（包括match+action）"></a>OpenFlow的例子（包括match+action）</h2><p>这是一种具体的SDN协议，具体有以下几个逻辑</p>
<ul>
<li>Pattern：match到符合这个pattern规定的packet</li>
<li>Actions：各类型的操作，比如丢弃，forward，修改都可以</li>
<li>Priority：避免同样pattern引发的混淆</li>
<li>Counters：记录处理的Bytes</li>
</ul>
<p>Flow Table里记录了三个主要部分</p>
<ol>
<li>Rule 匹配规则</li>
<li>Action 进行的处理</li>
<li>Stats 统计Packet+byte counters</li>
</ol>
]]></content>
      <categories>
        <category>计算机基础</category>
        <category>互联网协议</category>
      </categories>
  </entry>
  <entry>
    <title>互联网协议基本概念</title>
    <url>/2023/10/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E4%BA%92%E8%81%94%E7%BD%91%E5%8D%8F%E8%AE%AE/%E4%BA%92%E8%81%94%E7%BD%91%E5%8D%8F%E8%AE%AE%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<p>hexo 部署测试，内容不保证准确</p>
<h1 id="互联网的概念"><a href="#互联网的概念" class="headerlink" title="互联网的概念"></a>互联网的概念</h1><h2 id="什么是互联网？"><a href="#什么是互联网？" class="headerlink" title="什么是互联网？"></a>什么是互联网？</h2><h3 id="会用到的Terms"><a href="#会用到的Terms" class="headerlink" title="会用到的Terms"></a>会用到的Terms</h3><ul>
<li>hosts&#x3D;end systems 终端设备，手机，电脑，车</li>
<li>Communication links，例如光缆，电磁波，卫星</li>
<li>Packet switches&#x3D;路由器、交换机，转发，分发数据包</li>
</ul>
<h3 id="互联网是Network-of-networks"><a href="#互联网是Network-of-networks" class="headerlink" title="互联网是Network of networks"></a>互联网是Network of networks</h3><p>构成互联网传输规则的两个部分：</p>
<ul>
<li>Protocols：协议定义了数据的发送，接受的过程</li>
<li>Standards：标准，例如RFC，IETF这类标准<span id="more"></span></li>
</ul>
<h2 id="Network-Edge和Network-core"><a href="#Network-Edge和Network-core" class="headerlink" title="Network Edge和Network core"></a>Network Edge和Network core</h2><p>这是两个相对的概念，边缘Edge是说不承担数据的转移的职责。hosts内接受的数据都是自己产生或者消费的。<br>Core则是说相互连接的Router这一类，主要职责是转发别人产生和消费的数据的专用网络设备</p>
<p>终端设备通过类似5G网络，家用网络等方式来接入网络（宽带拨号，运营商和用户交互的方式是什么？）</p>
<h2 id="互联网的目的：数据传输"><a href="#互联网的目的：数据传输" class="headerlink" title="互联网的目的：数据传输"></a>互联网的目的：数据传输</h2><h3 id="数据包-packets"><a href="#数据包-packets" class="headerlink" title="数据包 packets"></a>数据包 packets</h3><ul>
<li>这是数据在网络上传输的最小单元</li>
<li>8 bits &#x3D; 1 Bytes，位和字节用来描述Packets的大小。</li>
</ul>
<h3 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h3><p>指代传输的速率，单位就是B&#x2F;s，b&#x2F;s，注意区分</p>
<h3 id="物理的介质"><a href="#物理的介质" class="headerlink" title="物理的介质"></a>物理的介质</h3><p>网络的传输有众多介质，例如</p>
<ul>
<li>以太网线缆</li>
<li>光纤</li>
<li>WIFI</li>
<li>移动通信技术</li>
<li>卫星通信</li>
</ul>
<h2 id="Network-core"><a href="#Network-core" class="headerlink" title="Network core"></a>Network core</h2><p>本质就是相互连接的路由器，组成的网络。相互间传递packets（由终端进行分包）</p>
<h3 id="Router间传输的过程"><a href="#Router间传输的过程" class="headerlink" title="Router间传输的过程"></a>Router间传输的过程</h3><ol>
<li>在transportation层被分成packets，发送给第一个Router</li>
<li>第一个Router在完整接收到Hosts发送的packet之后，再进行向外的发送</li>
<li>重复2，直到到达目的地</li>
</ol>
<h3 id="Network-core的两大主要功能"><a href="#Network-core的两大主要功能" class="headerlink" title="Network core的两大主要功能"></a>Network core的两大主要功能</h3><ul>
<li>Routing：根据目的地决定packets的传输路线</li>
<li>Forwarding：将packets从input发送到正确的output router去</li>
</ul>
<h3 id="网络核心的生态"><a href="#网络核心的生态" class="headerlink" title="网络核心的生态"></a>网络核心的生态</h3><ul>
<li>Tier 1的ISP运营商，有比较全面的国际连接，直接拥有海缆，陆缆的资源</li>
<li>Regional ISP，地区性的运营商。利用一级ISP的资源，并和其他2级ISP进行互联</li>
<li>access ISP，购买更高级别的ISP提供的服务，直接向用户提供互联网的接入服务</li>
<li>content provider，例如谷歌，微软。他们往往会建立一些IXP来和其他的ISP直接连接传输，以此来提供更好的数据访问性能。</li>
<li>content distribution networks（CDN），将互联网的内容向用户端推进</li>
</ul>
<h2 id="延迟、丢包和传输瓶颈"><a href="#延迟、丢包和传输瓶颈" class="headerlink" title="延迟、丢包和传输瓶颈"></a>延迟、丢包和传输瓶颈</h2><h3 id="丢包"><a href="#丢包" class="headerlink" title="丢包"></a>丢包</h3><p>产生的原因就是Router中的buffer大小有限，当buffer中没有空间的时候，packet就会丢失</p>
<h3 id="延迟"><a href="#延迟" class="headerlink" title="延迟"></a>延迟</h3><ol>
<li>对包进行检查和routing，计算checksum并决定输出连接（一般小于1ms的延迟）</li>
<li>排队等待Router进行发送（由路由器的拥挤程度决定）</li>
<li>发送带宽（L&#x2F;R，将Buffer中的数据发送到链路中）</li>
<li>光电信号传输时间的延迟（介质中传递的时间，取决于传输距离d&#x2F;s）</li>
</ol>
<h3 id="传输速率"><a href="#传输速率" class="headerlink" title="传输速率"></a>传输速率</h3><p>取决于传输过程中速率最低的那个环节</p>
<h1 id="分层模型"><a href="#分层模型" class="headerlink" title="分层模型"></a>分层模型</h1><p>Router是Network层的，Switch是link层的，Repeater（信号中继）是physical层的</p>
<h2 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型"></a>OSI七层模型</h2><ul>
<li>Application</li>
<li>Presentation</li>
<li>Session</li>
<li>Transport</li>
<li>Network</li>
<li>Data link</li>
<li>Physical</li>
</ul>
<h2 id="TCP-IP5层模型及其对应的协议"><a href="#TCP-IP5层模型及其对应的协议" class="headerlink" title="TCP&#x2F;IP5层模型及其对应的协议"></a>TCP&#x2F;IP5层模型及其对应的协议</h2><ul>
<li>Application：HTTP，SMTP</li>
<li>Transport</li>
<li>Network</li>
<li>Data link</li>
<li>Physical</li>
</ul>
<h2 id="各层对应的地址规格"><a href="#各层对应的地址规格" class="headerlink" title="各层对应的地址规格"></a>各层对应的地址规格</h2><ul>
<li>link层&#x3D;mac地址</li>
<li>Logical address layer 3&#x3D;IPV4和IPV6地址</li>
<li>Port address&#x3D;layer 4 端口号</li>
<li>Application &#x3D; URL</li>
</ul>
]]></content>
      <categories>
        <category>计算机基础</category>
        <category>互联网协议</category>
      </categories>
  </entry>
  <entry>
    <title>Transport Layer</title>
    <url>/2023/10/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E4%BA%92%E8%81%94%E7%BD%91%E5%8D%8F%E8%AE%AE/Transport%20Layer/</url>
    <content><![CDATA[<p>hexo 部署测试，内容不保证准确<br>给终端上的<strong>APP进程</strong>提供logical communication。<br>发送端负责将APP的数据分成segments，向下传递到network层。接收端则是将受到的sements重新组合为原始信息，向上递给app层</p>
<p>network层不像transport细分到process，network负责host到host</p>
<p>不论TCP还是UDP<strong>都不能保证延迟和带宽</strong></p>
<span id="more"></span>
<h1 id="multiplexing和demultiplexing"><a href="#multiplexing和demultiplexing" class="headerlink" title="multiplexing和demultiplexing"></a>multiplexing和demultiplexing</h1><h2 id="详细内容"><a href="#详细内容" class="headerlink" title="详细内容"></a>详细内容</h2><h3 id="multiplexing"><a href="#multiplexing" class="headerlink" title="multiplexing"></a>multiplexing</h3><p>把几个stream&#x2F;socket合并到一个stream中，例如email，web app的流量都被合并到一个stream中传输。</p>
<h3 id="demultiplexing"><a href="#demultiplexing" class="headerlink" title="demultiplexing"></a>demultiplexing</h3><p>接收端根据header中包含的信息（端口号），拼接成stream后分到不同的stream和socket中</p>
<h3 id="Connectionless-demultiplexing"><a href="#Connectionless-demultiplexing" class="headerlink" title="Connectionless demultiplexing"></a>Connectionless demultiplexing</h3><p>类似UDP这样的协议是Connectionless的，也就是没有end to end的1对1的socket对，完成demultiplexing的过程也是通过port number完成的。和TCP的区别就在于就在于UDP传输都是由一个socket完成的。</p>
<h2 id="TCP和UDP在mux和demux的区别到底是什么？"><a href="#TCP和UDP在mux和demux的区别到底是什么？" class="headerlink" title="TCP和UDP在mux和demux的区别到底是什么？"></a>TCP和UDP在mux和demux的区别到底是什么？</h2><p>TCP通过以下四个属性来建立socket对，只要有一个不一样都是新的socket对</p>
<ul>
<li>source IP</li>
<li>source port</li>
<li>destination IP</li>
<li>destination port<br>也就是说同一个Host（IP）的两个不同进程（port），发到同样的目标IP和port，也会在目标host上创建两个socket和本地host的两个socket相互对应，共4个socket</li>
</ul>
<p>UDP则只通过两个属性来判断</p>
<ul>
<li>destination IP</li>
<li>destination port<br>在上面的情境中，本地和目标host都只会各自拥有一个socket来完成传输，共两个socket</li>
</ul>
<h2 id="常用的端口号"><a href="#常用的端口号" class="headerlink" title="常用的端口号"></a>常用的端口号</h2><p>没有规则，事实上咋用都行</p>
<ul>
<li>80：HTTP，web app</li>
<li>22：SSH，ssh连接</li>
<li>25：SMTP，发送邮件</li>
<li>143：IMAP，阅读邮件</li>
<li>443：HTTPS：HTTP+SSL</li>
</ul>
<h1 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h1><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>是一种简单的传输层协议，缺点就是会丢包，包不按顺序<br><strong>Key term-Connectionless：</strong></p>
<ul>
<li>host间没有握手的过程，说发就发</li>
<li>每个UDP的packet间都是独立的<br>适用的场景：</li>
<li>流传输（注重速率，而可以忍受一定的丢包）</li>
<li>DNS（域名服务）</li>
<li>SNMP</li>
<li>大部分线上游戏<br>当然，也可以在App层添加一些增加可靠性的手段，来提升UDP的可用性</li>
</ul>
<h2 id="UDP包的结构"><a href="#UDP包的结构" class="headerlink" title="UDP包的结构"></a>UDP包的结构</h2><h3 id="header部分（记录了描述这个包和传输信息的metadata）"><a href="#header部分（记录了描述这个包和传输信息的metadata）" class="headerlink" title="header部分（记录了描述这个包和传输信息的metadata）"></a>header部分（记录了描述这个包和传输信息的metadata）</h3><ul>
<li>source port：发送端的port</li>
<li>destination port：接收端的port</li>
<li>length：记录了该segment的bytes数</li>
<li>checksum：用于校验该segment是否在传输中发生了bit filp</li>
</ul>
<h3 id="payload部分"><a href="#payload部分" class="headerlink" title="payload部分"></a>payload部分</h3><p>app层的数据</p>
<h3 id="UDP包外层的结构-header套header"><a href="#UDP包外层的结构-header套header" class="headerlink" title="UDP包外层的结构-header套header"></a>UDP包外层的结构-header套header</h3><p>MAC header（IP header（UDP header（数据）））</p>
<h1 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h1><h2 id="TCP的基础-Pipelined-protocol"><a href="#TCP的基础-Pipelined-protocol" class="headerlink" title="TCP的基础-&gt;Pipelined protocol"></a>TCP的基础-&gt;Pipelined protocol</h2><p>由于发送端允许多个包同时在传输途中，而不需要ACK。所以需要处理多个包的seq num来完成对管道的模拟，主要是两种方式</p>
<ul>
<li>利用率：用来描述发送端发送数据占单次发送的总时长<ul>
<li>发送时长&#x2F;（RTT+发送时长）</li>
</ul>
</li>
</ul>
<h3 id="Go-back-N"><a href="#Go-back-N" class="headerlink" title="Go-back-N"></a>Go-back-N</h3><ul>
<li>发送端可以同时有N个未被ACK的packets在pipeline中</li>
<li>接收端只回复具有连续性的ACK，存在gap则不发送后续包的ACK，而是发送最新的ACK</li>
<li>发送端只给最老的，未被ack的包计时。如果时间过期，则重新发送所有未被ACK的包<br>滑动窗口，ACK决定了发送端窗口的左指针的位置，右指针 &#x3D; 左指针+N<br>由于接收端发送ACK具有连续性，因此发送端接收到ACK后就可以直接移动左指针，而不需要确保发送端收到的ACK的连续性。</li>
</ul>
<h3 id="Selective-repeat"><a href="#Selective-repeat" class="headerlink" title="Selective repeat"></a>Selective repeat</h3><ul>
<li>发送端可以有最多N个未被ACK的包在pipeline中</li>
<li>接收端对于每个包的ACK是单独发送的</li>
<li>发送端给每个packet进行单独的ACK计时，单独发送超时的包。发送后重新计时<br>这个方式的问题是要注意序号轮转的周期和滑动窗口的大小。避免方式是轮转周期数&gt;&#x3D;2x滑动窗口大小</li>
</ul>
<h2 id="TCP特性概览"><a href="#TCP特性概览" class="headerlink" title="TCP特性概览"></a>TCP特性概览</h2><ul>
<li>点对点的连接，socket对</li>
<li>可靠的，有序的byte stream</li>
<li>管道化的结构，通过congestion和flow control完成window size的管理</li>
<li>双向连接，发送和接受在同一个管道中</li>
<li>MSS：最大segment size</li>
<li>连接状态：连接开始时需要进行握手</li>
<li>flow control：发送端要避免撑爆接收端</li>
</ul>
<h2 id="TCP的header"><a href="#TCP的header" class="headerlink" title="TCP的header"></a>TCP的header</h2><ul>
<li>Source port</li>
<li>Destination port</li>
<li>Seq Num:表示当前segment中第一个byte在全部stream中的序数</li>
<li>ACK Num：期望对方发送的下一个byte在对方的相对位置</li>
<li>length</li>
<li>receive window</li>
<li>checksum<br>bit data，只有一位表示是否为该状态</li>
<li>urgent data?</li>
<li>push data now?</li>
<li>RST</li>
<li>SYN</li>
<li>FIN</li>
</ul>
<h2 id="TCP的Timer（结合了GBN和SR，发送端是计时最老packet的SR，接收端回传ACK的规则是GBN）"><a href="#TCP的Timer（结合了GBN和SR，发送端是计时最老packet的SR，接收端回传ACK的规则是GBN）" class="headerlink" title="TCP的Timer（结合了GBN和SR，发送端是计时最老packet的SR，接收端回传ACK的规则是GBN）"></a>TCP的Timer（结合了GBN和SR，发送端是计时最老packet的SR，接收端回传ACK的规则是GBN）</h2><p>TCP中的超时时间很重要，这决定了传输是否高效，如何科学的给timer设定时间呢？<br>设定时间的时候需要遵守以下原则：</p>
<ul>
<li>要比RTT长一点，但不能长太多：留冗余，同时避免过长的等待时间导致效率低下<br>那么如何估计RTT呢？</li>
<li>Sample RTT：从传输中取样，忽略重传这类特殊情况<br>但是，SampleRTT有时候会面临剧烈的波动，所以还需要继续调整<br>Estimate RTT &#x3D; (1-a)xEstimatedRTT + a x sampleRTT<br>这里很像学习率的概念，保留旧有的趋势，同时加上新的变动</li>
<li>JK算法：Estimated RTT还不够，再加上一个safety margin才有真正的实用价值，这里就解决了Safty margin的计算</li>
<li>DevRTT &#x3D; （1-b）x DevRTT + b x |sampleRTT-EstimatedRTT|</li>
<li>和Estimate的逻辑类似，只是这里计算的是实际和估计的差值用来预估margin</li>
<li>TimeoutInterval &#x3D; EstimatedRTT + 4 x DevRTT</li>
</ul>
<h3 id="快速重传机制"><a href="#快速重传机制" class="headerlink" title="快速重传机制"></a>快速重传机制</h3><ul>
<li>如果receiver的ACK没有被Sender收到，sender超时后就会重发，receiver就会发送目前ACK序数最高的那个ACK，这没什么问题</li>
<li>那如果，sender发送的segment没被receiver收到呢？receiver收到后续包的时候，就会持续接受并回传已经ACK的序数，sender端等到packet超时才会重新发送receive端需要的<br>那么等待sender超时，时间比较长。所以避免等待，<strong>当出现3次同样序号的ACK时，自动重发Seq序数最小的那个</strong>，避免长时间等待</li>
</ul>
<h1 id="Flow-control和Congestion-control"><a href="#Flow-control和Congestion-control" class="headerlink" title="Flow control和Congestion control"></a>Flow control和Congestion control</h1><h2 id="需要用到的Terms"><a href="#需要用到的Terms" class="headerlink" title="需要用到的Terms"></a>需要用到的Terms</h2><ul>
<li>MSS：指代从APP层传下来的Data payload的大小</li>
<li>MTU：指代包括IP header, TCP header的包大小</li>
</ul>
<h2 id="Flow-Control流控制"><a href="#Flow-Control流控制" class="headerlink" title="Flow Control流控制"></a>Flow Control流控制</h2><p>receiver调节sender端的机制，这样<strong>避免了sender挤爆receiver</strong>的情况</p>
<ul>
<li>receiver通过回传一个rwnd的大小，来反馈给sender端，告诉自己的目前空闲的buffer space</li>
<li>sender就会根据rwnd的大小来控制自己未被ACK的包的窗口大小</li>
</ul>
<h3 id="Nagle-算法"><a href="#Nagle-算法" class="headerlink" title="Nagle 算法"></a>Nagle 算法</h3><p>解决的问题就是：如果Payload太小，包的头文件header比里面的内容还多，效率很低。具体的情景有SSH，比如这边敲一个字母，远端主机是不是也要接受一个字母的输入流？<br>算法的流程：</p>
<ol>
<li>发送端直接发送接收到的第一块数据，无论大小</li>
<li>一直在发送端积累数据，直到以下两种情况发生<ol>
<li>收到receiver端的ACK命令</li>
<li>数据积累到了最大的segment size</li>
</ol>
</li>
</ol>
<h3 id="Silly-Window-Syndrome"><a href="#Silly-Window-Syndrome" class="headerlink" title="Silly Window Syndrome"></a>Silly Window Syndrome</h3><p>该现象的原因就是TCP发送端被迫发送非常小的packets，所以发送窗口的大小很silly。<br>具体来说：</p>
<ul>
<li>当发送端产生数据很慢的时候（类似上个问题的情景）</li>
<li>Receiver处理数据太慢的时候，所以空闲的buffer size总是太小<br>解决方式就是receiver别发送会让sender发小数据的rwnd</li>
</ul>
<h2 id="Congestion-control"><a href="#Congestion-control" class="headerlink" title="Congestion control"></a>Congestion control</h2><p>和Flow Control不同，Congestion Control是为了<strong>避免网络的负担</strong>太重而产生传输问题<br>通过一个cwnd窗口来限制传输的速率</p>
<h3 id="不同丢包原因有不同的处理方式"><a href="#不同丢包原因有不同的处理方式" class="headerlink" title="不同丢包原因有不同的处理方式"></a>不同丢包原因有不同的处理方式</h3><ul>
<li><strong>超时</strong>导致的loss：cwnd直接设置为1MSS，重新开始slow start</li>
<li>快速重传，发现<strong>3个相同的ACK</strong>：（TCP RENO）cwnd砍半后线性增长</li>
<li>如果是TCP Tahoe，上面两种情境的处理方式都一样，总是使用重设1mSS+Slow start</li>
</ul>
<h3 id="Slow-Start机制"><a href="#Slow-Start机制" class="headerlink" title="Slow Start机制"></a>Slow Start机制</h3><p>当连接刚刚开始的时候，增长不是additive increase，而是指数级的，直到丢包发生。之后切换slowstart到congestion avoidance模式。什么时候切换？</p>
<ul>
<li>当传输大小达到ssthresh时。如果发生丢包，ssthresh被重设为之前cwnd的一半</li>
</ul>
<h3 id="TCP的congestion-control：慢增快减"><a href="#TCP的congestion-control：慢增快减" class="headerlink" title="TCP的congestion control：慢增快减"></a>TCP的congestion control：慢增快减</h3><p>具体的cwnd设置逻辑如下：</p>
<ol>
<li>设置cwnd的初始大小</li>
<li>慢增：每个RTT增加1MSS的大小到cwnd，直到丢包发生</li>
<li>快减：如果发生丢包，cwnd变为原来的一半</li>
</ol>
<h1 id="TCP连接的建立和结束"><a href="#TCP连接的建立和结束" class="headerlink" title="TCP连接的建立和结束"></a>TCP连接的建立和结束</h1><h2 id="建立"><a href="#建立" class="headerlink" title="建立"></a>建立</h2><ol>
<li>Client: SYN</li>
<li>Server SYN+ACK</li>
<li>Client: ACK<br>两次握手最大的问题在于服务器不知道client对他的回应是什么。避免了半开的连接，一方认为连接存活一方认为连接失败。</li>
</ol>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><ol>
<li>Client: FIN</li>
<li>Server: ACK</li>
<li>Server: ACK</li>
<li>Client: FIN<br>服务器要把关于client的连接处理完毕后再结束，所以1+2和3+4之间有一定的server处理的延迟</li>
</ol>
]]></content>
      <categories>
        <category>计算机基础</category>
        <category>互联网协议</category>
      </categories>
  </entry>
</search>
